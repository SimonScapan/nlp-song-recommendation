{"version":3,"sources":["App.js","databasehandler.js","index.js"],"names":["allSongs","Object","values","response","$","ajax","url","Database_url","dataType","type","async","success","serverResponse","console","log","error","Error","getAllSongs","App","useState","song_title","selectedSong","setSelectedSong","suggestionResults","setSuggestionResults","Array","min","array","Math","apply","generateSuggestionDisplay","songSuggestions","songInformations","forEach","song","sentimentError","song_genre","array1","array2","i","length","j","findCommonElement","abs","happy","angry","surprise","sad","fear","push","returnSongs","inbdexOfSmallestError","allSongs_tmp_copy","slice","index","indexOf","splice","getSongSuggestions","nameKey","myArray","search","className","style","textAlign","Autocomplete","id","options","getOptionLabel","option","renderInput","params","TextField","label","variant","width","marginLeft","marginRight","onChange","e","target","innerHTML","onClick","ReactDOM","render","document","getElementById"],"mappings":"oQAQA,IAAIA,EAAWC,OAAOC,OCFf,WACH,IAAIC,EAkBJ,OAjBAC,IAAEC,KAAK,CACHC,IAAKC,wDACLC,SAAU,OACVC,KAAM,MACNC,OAAO,EACPC,QAAS,SAAUC,GAEfC,QAAQC,IAAIF,GACZT,EAAWS,GAEfG,MAAO,SAAUH,GAIb,MAHAC,QAAQC,IAAI,uBAAwBF,GACpCT,EAAWS,EAEL,IAAII,MAAM,wCAGjBb,EDjBkBc,IAqHdC,MAnHf,WAAgB,IAAD,EAC2BC,mBAAS,CAAEC,WAAY,KADlD,mBACNC,EADM,KACQC,EADR,OAEqCH,mBAAS,CAAC,CAAEC,WAAY,IAAM,CAAEA,WAAY,IAAM,CAAEA,WAAY,MAFrG,mBAENG,EAFM,KAEaC,EAFb,KAGbC,MAAMC,IAAM,SAAUC,GACpB,OAAOC,KAAKF,IAAIG,MAAMD,KAAMD,IAG9B,IAmEIG,EAA4B,WAC9B,IACIC,EAtCmB,SAACC,GACxB,IAAIjB,EAAQ,GAEZf,EAASiC,SAAQ,SAAUC,GACzB,IAAIC,EAAiB,EACrBtB,QAAQC,IAAIoB,EAAKE,YACjBvB,QAAQC,IAAIkB,EAAiBI,YAC7BvB,QAAQC,IAAIoB,EAAKE,aAAeJ,EAAiBI,YAC7CF,EAAKd,YAAcY,EAAiBZ,YA/BpB,SAACiB,EAAQC,GAG/B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IAGjC,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAOE,OAAQC,IAKjC,GAAIJ,EAAOE,KAAOD,EAAOG,GAGvB,OAAO,EAMb,OAAO,EAWiDC,CAAkBR,EAAKE,WAAYJ,EAAiBI,aAExGvB,QAAQC,IAAI,SACZqB,EAAiB,OAIjBA,GAAkBP,KAAKe,IAAIT,EAAKU,MAAQZ,EAAiBY,OACzDT,GAAkBP,KAAKe,IAAIT,EAAKW,MAAQb,EAAiBa,OACzDV,GAAkBP,KAAKe,IAAIT,EAAKY,SAAWd,EAAiBc,UAC5DX,GAAkBP,KAAKe,IAAIT,EAAKa,IAAMf,EAAiBe,KACvDZ,GAAkBP,KAAKe,IAAIT,EAAKc,KAAOhB,EAAiBgB,OAE1DjC,EAAMkC,KAAKd,MAMb,IAHA,IAAIe,EAAc,GACdC,EAAwB,EACxBC,EAAoBpD,EAASqD,MAAM,GAAI,GAClCC,EAAQ,EAAGA,EAAQ,EAAGA,IAC7BH,EAAwBpC,EAAMwC,QAAQ3B,KAAKF,IAAIG,MAAMD,KAAMb,IAC3DmC,EAAYD,KAAKG,EAAkBI,OAAOL,EAAuB,GAAG,IAGtE,OAAOD,EAMeO,CArEX,SAACC,EAASC,GACrB,IAAK,IAAIpB,EAAI,EAAGA,EAAIoB,EAAQnB,OAAQD,IAClC,GAAIoB,EAAQpB,GAAGnB,aAAesC,EAAQtC,WACpC,OAAOuC,EAAQpB,GAiEWqB,CAAOvC,EAAcrB,IAEnDwB,EAAqBO,GACrBT,EAAgB,CAAEF,WAAY,MAGhC,OACE,yBAAKyC,UAAU,MAAMC,MAAO,CAAEC,UAAW,WACvC,wBAAID,MAAO,CAAEC,UAAW,WAAxB,qBAEA,kBAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,QAASlE,EACTmE,eAAgB,SAACC,GAAD,OAAYA,EAAOhD,YACnCiD,YAAa,SAACC,GAAD,OAAY,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBE,MAAM,YAAYC,QAAQ,eAC1EX,MAAO,CACLY,MAAO,IACPC,WAAY,OACZC,YAAa,QAEfC,SAAU,SAACC,GAAQxD,EAAgB,CAAEF,WAAY0D,EAAEC,OAAOC,eAE5D,4BACEC,QAAS,WAAQnD,KACjBgC,MAAO,CACLa,WAAY,OACZC,YAAa,SAEd,wBAEH,uBAAGd,MAAO,CAAEC,UAAW,WAAvB,kBACA,uBAAGD,MAAO,CAAEC,UAAW,WAAaxC,EAAkB,GAAGH,YACzD,uBAAG0C,MAAO,CAAEC,UAAW,WAAaxC,EAAkB,GAAGH,YACzD,uBAAG0C,MAAO,CAAEC,UAAW,WAAaxC,EAAkB,GAAGH,cElH/D8D,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.e870a04d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter, Route, Link, Switch } from \"react-router-dom\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport './App.css';\r\nimport { getAllSongs } from \"./databasehandler\"\r\n\r\nlet allSongs = Object.values(getAllSongs());\r\n\r\nfunction App() {\r\n  const [selectedSong, setSelectedSong] = useState({ song_title: \"\" });\r\n  const [suggestionResults, setSuggestionResults] = useState([{ song_title: \"\" }, { song_title: \"\" }, { song_title: \"\" }]);\r\n  Array.min = function (array) {\r\n    return Math.min.apply(Math, array);\r\n  };\r\n\r\n  let search = (nameKey, myArray) => {\r\n    for (var i = 0; i < myArray.length; i++) {\r\n      if (myArray[i].song_title === nameKey.song_title) {\r\n        return myArray[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  let findCommonElement = (array1, array2) => {\r\n\r\n    // Loop for array1\r\n    for (let i = 0; i < array1.length; i++) {\r\n\r\n      // Loop for array2\r\n      for (let j = 0; j < array2.length; j++) {\r\n\r\n        // Compare the element of each and\r\n        // every element from both of the\r\n        // arrays\r\n        if (array1[i] === array2[j]) {\r\n\r\n          // Return if common element found\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Return if no common element exist\r\n    return false;\r\n  }\r\n  var BreakException = {};\r\n  let getSongSuggestions = (songInformations) => {\r\n    let error = []\r\n    // {angry: 0.15, fear: 0.08, genre: 0, happy: 0, interpret: \"['Uli']\", …}\r\n    allSongs.forEach(function (song) {\r\n      let sentimentError = 0\r\n      console.log(song.song_genre)\r\n      console.log(songInformations.song_genre)\r\n      console.log(song.song_genre !== songInformations.song_genre)\r\n      if (song.song_title == songInformations.song_title || findCommonElement(song.song_genre, songInformations.song_genre)\r\n      ) {\r\n        console.log(\"im IF\")\r\n        sentimentError = 100000000000\r\n        // compare sentiment and sum total error\r\n        // In the end get the songs with the smallest error\r\n      } else {\r\n        sentimentError += Math.abs(song.happy - songInformations.happy)\r\n        sentimentError += Math.abs(song.angry - songInformations.angry)\r\n        sentimentError += Math.abs(song.surprise - songInformations.surprise)\r\n        sentimentError += Math.abs(song.sad - songInformations.sad)\r\n        sentimentError += Math.abs(song.fear - songInformations.fear)\r\n      }\r\n      error.push(sentimentError)\r\n    });\r\n\r\n    let returnSongs = []\r\n    let inbdexOfSmallestError = 0\r\n    let allSongs_tmp_copy = allSongs.slice(0, -1)\r\n    for (let index = 0; index < 3; index++) {\r\n      inbdexOfSmallestError = error.indexOf(Math.min.apply(Math, error));\r\n      returnSongs.push(allSongs_tmp_copy.splice(inbdexOfSmallestError, 1)[0])\r\n    }\r\n\r\n    return returnSongs\r\n\r\n  }\r\n\r\n  let generateSuggestionDisplay = () => {\r\n    let currentSongInformations = search(selectedSong, allSongs)\r\n    let songSuggestions = getSongSuggestions(currentSongInformations)\r\n    setSuggestionResults(songSuggestions)\r\n    setSelectedSong({ song_title: \"\" })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" style={{ textAlign: \"center\" }}>\r\n      <h1 style={{ textAlign: \"center\" }}>Songtiteleingabe:</h1>\r\n\r\n      <Autocomplete\r\n        id=\"combo-box-demo\"\r\n        options={allSongs}\r\n        getOptionLabel={(option) => option.song_title}\r\n        renderInput={(params) => <TextField {...params} label=\"Combo box\" variant=\"outlined\" />}\r\n        style={{\r\n          width: 300,\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\"\r\n        }}\r\n        onChange={(e) => { setSelectedSong({ song_title: e.target.innerHTML }) }}\r\n      />\r\n      <button\r\n        onClick={() => { generateSuggestionDisplay() }}\r\n        style={{\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\"\r\n        }}>\r\n        {\"Vorschlag generieren\"}\r\n      </button>\r\n      <p style={{ textAlign: \"center\" }}>Songvorschlag:</p>\r\n      <p style={{ textAlign: \"center\" }}>{suggestionResults[0].song_title}</p>\r\n      <p style={{ textAlign: \"center\" }}>{suggestionResults[1].song_title}</p>\r\n      <p style={{ textAlign: \"center\" }}>{suggestionResults[2].song_title}</p>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import $ from 'jquery';\r\n//old url\r\n//const Database_url = \"https://cocktailapp-d958.firebaseio.com/\"\r\nconst Database_url = \"https://murat-db-20-default-rtdb.firebaseio.com/\"\r\n\r\n\r\nexport function getAllSongs() {\r\n    let response\r\n    $.ajax({\r\n        url: Database_url + '.json',\r\n        dataType: \"json\",\r\n        type: 'GET',\r\n        async: false,\r\n        success: function (serverResponse) {\r\n\r\n            console.log(serverResponse)\r\n            response = serverResponse;\r\n        },\r\n        error: function (serverResponse) {\r\n            console.log(\"Errorlog: Response: \", serverResponse);\r\n            response = serverResponse;\r\n            debugger;\r\n            throw new Error(\"Error during loading of all songs\");\r\n        }\r\n    });\r\n    return response\r\n}","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))"],"sourceRoot":""}