{"version":3,"sources":["App.js","databasehandler.js","index.js"],"names":["App","useState","selectedSong","setSelectedSong","suggestionResults","setSuggestionResults","allSongs","Object","values","response","$","ajax","url","Database_url","dataType","type","async","success","serverResponse","console","log","error","Error","getAllSongs","Array","min","array","Math","apply","generateSuggestionDisplay","songSuggestions","songInformations","erorr","forEach","song","index","sentimentError","happy","angry","surprise","sad","fear","push","smallestError","inbdexOfSmallestError","indexOf","getSongSuggestions","nameKey","myArray","i","length","title","search","className","Autocomplete","id","options","getOptionLabel","option","style","width","renderInput","params","TextField","label","variant","onChange","e","target","innerHTML","onClick","ReactDOM","render","document","getElementById"],"mappings":"oQAiFeA,MAxEf,WAAgB,IAAD,EAC2BC,mBAAS,IADpC,mBACNC,EADM,KACQC,EADR,OAEqCF,qBAFrC,mBAENG,EAFM,KAEaC,EAFb,KAGTC,EAAWC,OAAOC,OCNjB,WACH,IAAIC,EAkBJ,OAjBAC,IAAEC,KAAK,CACHC,IAAKC,6EACLC,SAAU,OACVC,KAAM,MACNC,OAAO,EACPC,QAAS,SAAUC,GAEfC,QAAQC,IAAIF,GACZT,EAAWS,GAEfG,MAAO,SAAUH,GAIb,MAHAC,QAAQC,IAAI,uBAAwBF,GACpCT,EAAWS,EAEL,IAAII,MAAM,wCAGjBb,EDboBc,IAC7BJ,QAAQC,IAAId,GAEZkB,MAAMC,IAAM,SAAUC,GACpB,OAAOC,KAAKF,IAAIG,MAAMD,KAAMD,IAG9B,IA4BIG,EAA4B,WAC9B,IACIC,EAtBmB,SAACC,GACxB,IAAIC,EAAQ,GAGZ1B,EAAS2B,SAAQ,SAAUC,EAAMC,EAAOd,GACtC,IAAIe,EAAiB,EACrBA,GAAkBF,EAAKG,MAAQN,EAAiBM,MAChDD,GAAkBF,EAAKI,MAAQP,EAAiBO,MAChDF,GAAkBF,EAAKK,SAAWR,EAAiBQ,SACnDH,GAAkBF,EAAKM,IAAMT,EAAiBS,IAC9CJ,GAAkBF,EAAKO,KAAOV,EAAiBU,KAC/CpB,EAAMqB,KAAKN,MAEb,IAAIO,EAAgBX,EAAMP,IACtBmB,EAAwBZ,EAAMa,QAAQF,GAC1CxB,QAAQC,IAAI,sBACZD,QAAQC,IAAId,EAASsC,IAMCE,CA9BX,SAACC,EAASC,GACrB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAClC,GAAID,EAAQC,GAAGE,QAAUJ,EACvB,OAAOC,EAAQC,GA0BWG,CAAOlD,EAAcI,IAEnDD,EAAqB,4BAAKyB,IAC1B3B,EAAgB,IAChBgB,QAAQC,IAAI,4BAKd,OAFAD,QAAQC,IAAIhB,GACZe,QAAQC,IAAIlB,GAEV,yBAAKmD,UAAU,OACb,iDAEA,kBAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,QAASlD,EACTmD,eAAgB,SAACC,GAAD,OAAYA,EAAOP,OACnCQ,MAAO,CAAEC,MAAO,KAChBC,YAAa,SAACC,GAAD,OAAY,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuBE,MAAM,YAAYC,QAAQ,eAC1EC,SAAU,SAACC,GAAQhE,EAAgBgE,EAAEC,OAAOC,cAE9C,4BACEC,QAAS,WAAQzC,MAChB,wBAGFzB,IEpEPmE,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.462f6be9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Link, Switch } from \"react-router-dom\";\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport TextField from '@material-ui/core/TextField'\nimport './App.css';\nimport { getAllSongs } from \"./databasehandler\"\n\n\nfunction App() {\n  const [selectedSong, setSelectedSong] = useState(\"\");\n  const [suggestionResults, setSuggestionResults] = useState();\n  let allSongs = Object.values(getAllSongs());\n  console.log(allSongs)\n  \n  Array.min = function (array) {\n    return Math.min.apply(Math, array);\n  };\n\n  let search = (nameKey, myArray) => {\n    for (var i = 0; i < myArray.length; i++) {\n      if (myArray[i].title === nameKey) {\n        return myArray[i];\n      }\n    }\n  }\n\n  let getSongSuggestions = (songInformations) => {\n    let erorr = []\n    // index; Error\n    // {\"Happy\": 0, \"Angry\": 0, \"Surprise\": 0, \"Sad\": 0, \"Fear\": 0}\n    allSongs.forEach(function (song, index, error){\n      let sentimentError = 0\n      sentimentError += song.happy - songInformations.happy\n      sentimentError += song.angry - songInformations.angry\n      sentimentError += song.surprise - songInformations.surprise\n      sentimentError += song.sad - songInformations.sad\n      sentimentError += song.fear - songInformations.fear\n      error.push(sentimentError)\n    });\n    let smallestError = erorr.min;\n    var inbdexOfSmallestError = erorr.indexOf(smallestError);\n    console.log(\"Songrecommondatino\")\n    console.log(allSongs[inbdexOfSmallestError])\n\n  }\n\n  let generateSuggestionDisplay = () => {\n    let currentSongInformations = search(selectedSong, allSongs)\n    let songSuggestions = getSongSuggestions(currentSongInformations)\n    setSuggestionResults(<h1>{songSuggestions}</h1>)\n    setSelectedSong(\"\")\n    console.log(\"generateSuffestion fetr\")\n  }\n\n  console.log(suggestionResults)\n  console.log(selectedSong)\n  return (\n    <div className=\"App\">\n      <h1>Songtiteleingabe:</h1>\n\n      <Autocomplete\n        id=\"combo-box-demo\"\n        options={allSongs}\n        getOptionLabel={(option) => option.title}\n        style={{ width: 300 }}\n        renderInput={(params) => <TextField {...params} label=\"Combo box\" variant=\"outlined\" />}\n        onChange={(e) => { setSelectedSong(e.target.innerHTML) }}\n      />\n      <button\n        onClick={() => { generateSuggestionDisplay() }}>\n        {\"Vorschlag generieren\"}\n      </button>\n\n      {suggestionResults}\n\n\n    </div>\n  );\n}\n\nexport default App;\n","import $ from 'jquery';\r\n//old url\r\n//const Database_url = \"https://cocktailapp-d958.firebaseio.com/\"\r\nconst Database_url = \"https://murat-db-default-rtdb.europe-west1.firebasedatabase.app/\"\r\n\r\n\r\nexport function getAllSongs() {\r\n    let response\r\n    $.ajax({\r\n        url: Database_url + 'songs.json',\r\n        dataType: \"json\",\r\n        type: 'GET',\r\n        async: false,\r\n        success: function (serverResponse) {\r\n\r\n            console.log(serverResponse)\r\n            response = serverResponse;\r\n        },\r\n        error: function (serverResponse) {\r\n            console.log(\"Errorlog: Response: \", serverResponse);\r\n            response = serverResponse;\r\n            debugger;\r\n            throw new Error(\"Error during loading of all songs\");\r\n        }\r\n    });\r\n    return response\r\n}","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { HashRouter, BrowserRouter, Route, Link, Switch } from \"react-router-dom\";\n\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById(\"root\"))"],"sourceRoot":""}